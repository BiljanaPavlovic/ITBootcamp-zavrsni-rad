{"version":3,"sources":["util/service.js","components/login.jsx","components/register.jsx","components/listatema.jsx","layout/header.jsx","components/novaTema.jsx","components/postojecatema.jsx","components/profil.jsx","layout/content.jsx","layout/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["BASEURL","API","USERS","MESSAGE","TOPICS","getMsnOnTpc","id","fetch","then","res","json","addMessage","user","headers","method","body","JSON","stringify","withRouter","history","setUser","useState","username","setUsername","password","setPassword","handleSubmit","data","success","push","user_id","console","log","alert","className","type","placeholder","required","onInput","e","target","value","onClick","preventDefault","Register","name","setName","surname","setSurname","email","setEmail","pwConfirm","setPwConfirm","validPw","setValidPw","isSame","setIsSame","useEffect","test","topics","setTopics","map","topic","topic_id","title","toString","Header","to","path","NovaTema","setTitle","message","setMessage","addTopic","Tema","match","params","topicID","messages","setMessages","key","message_id","Date","timestamp","toLocaleTimeString","Profil","usern","userID","src","Content","component","props","Footer","App","basename","loggedin","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfc181fa.chunk.js","sourcesContent":["const BASEURL = ' https://coetus.herokuapp.com';\r\nconst API = '/api/forum';\r\nconst USERS = '/users';\r\nconst USERSID = ':user_id'\r\nconst MESSAGE = '/message';\r\nconst TOPICS = '/topics';\r\nconst TOPICSID = '/:topic_id'\r\n\r\nfunction register(user) {\r\n    return fetch(`${BASEURL}${API}${USERS}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        method: 'PUT',\r\n        body: JSON.stringify(user)\r\n    }).then(res => res.json())\r\n}\r\n\r\nfunction login(user) {\r\n    let res = fetch(`${BASEURL}${API}${USERS}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(user)\r\n    }).then(res => res.json())\r\n    return res\r\n}\r\n\r\n\r\nfunction getUsername(user_id) {\r\n    return fetch(`${BASEURL}${API}${USERS}/${user_id}`)\r\n        .then(res => res.json())\r\n}\r\n\r\n\r\nfunction getTopic(topics) {\r\n    return fetch(`${BASEURL}${API}/topics`)\r\n        .then(res => res.json())\r\n\r\n}\r\n\r\nfunction addTopic(user_id, title) {\r\n    return fetch(`${BASEURL}${API}${TOPICS}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        method: 'PUT',\r\n        body: JSON.stringify({user_id,title})\r\n    }).then(res => res.json())\r\n}\r\n\r\nfunction getMsnOnTpc(id) {\r\n    return fetch(`${BASEURL}${API}${MESSAGE}/${id}`)\r\n        .then(res => res.json())\r\n}\r\n\r\nfunction addMessage(user) {\r\n    return fetch(`${BASEURL}${API}${MESSAGE}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        method: 'PUT',\r\n        body: JSON.stringify(user)\r\n    }).then(res => res.json())\r\n}\r\n\r\n\r\n\r\nexport {\r\n    register,\r\n    login,\r\n    getUsername,\r\n    getTopic,\r\n    addTopic,\r\n    getMsnOnTpc,\r\n    addMessage\r\n}","import React, { useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { login } from '../util/service';\r\n\r\nconst Login = ({history,setUser}) => {\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    function handleSubmit(){\r\n        login({username,password})\r\n        .then(data =>  {\r\n            if(data.success) {\r\n                setUser(data.user)\r\n              history.push(`/profile/${data.user.user_id}`)\r\n                console.log('ulogovan')\r\n                alert(\"Ulogovani ste!\")\r\n            }\r\n            else{alert(\"Neispravan unos\")} \r\n            console.log(data,'Није улогован')\r\n            \r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <form>\r\n        <div className = \"Login\">\r\n            <h3>Ako već imaš nalog uloguj se!</h3>\r\n            <input className=\"input-lr\" type= 'text' placeholder=\"username\" required onInput={e => {\r\n                setUsername(e.target.value)\r\n            }}  /><br/>\r\n            <input className=\"input-lr\" type=\"password\" placeholder=\"password\" required onInput={e => {\r\n                setPassword(e.target.value)\r\n            } } /><br/>\r\n            <input className=\"dugme\" type=\"submit\" value=\"Uloguj se\" onClick={(e) => {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n            }} />\r\n        </div>\r\n        </form>\r\n)\r\n}\r\n\r\nexport default withRouter(Login)","import React, { useState, useEffect } from 'react';\r\nimport { register } from '../util/service';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Register = ({setUser,history}) => {\r\n    const [name, setName] = useState('')\r\n    const [surname, setSurname] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [pwConfirm,setPwConfirm] = useState('')\r\n    const [validPw, setValidPw] = useState(false)\r\n    const [isSame, setIsSame] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        function isValidPw(){\r\n            if((/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/g).test(password)){\r\n                setValidPw(true)\r\n            }\r\n            else{\r\n                setValidPw(false)\r\n            }\r\n        }\r\n        console.log(password)\r\n        isValidPw()\r\n    },[password])\r\n\r\n    useEffect(() => {\r\n        setIsSame(pwConfirm === password)\r\n        console.log(pwConfirm === password)\r\n    },[pwConfirm,password])\r\n\r\n    function handleSubmit(){\r\n        if(!validPw || !isSame)\r\n            return\r\n        register({name,surname,username,email,password})\r\n        .then(data =>  {\r\n            if(data.success) {\r\n               setUser(data.user)\r\n             console.log('Uspesna registracija')\r\n            //   history.push('/profile')\r\n           }\r\n          else console.log(data, 'Neuspesna registracija')\r\n       })\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className = \"register\">\r\n            <form>\r\n            <h3>Registruj se!</h3>\r\n            <input className=\"input-lr\" type=\"text\" placeholder=\"Ime\" required onInput={e => {\r\n                setName(e.target.value)\r\n            }} /><br />\r\n            <input className=\"input-lr\" type=\"text\" placeholder=\"Prezime\" required onInput={e => {\r\n                setSurname(e.target.value)\r\n            }} /><br />\r\n            <input className=\"input-lr\" type=\"text\" placeholder=\"Username\" required onInput={e => {\r\n                setUsername(e.target.value)\r\n            }} /><br />\r\n            <input className=\"input-lr\" type=\"text\" placeholder=\"E-mail\" required onInput={e => {\r\n                setEmail(e.target.value)\r\n            }} /><br />\r\n            <input className=\"input-lr\" type=\"password\" placeholder=\"Password\" required \r\n           onInput={e => {\r\n             setPassword(e.target.value)\r\n          } }\r\n             /><br />\r\n            <input className=\"input-lr\" type=\"password\" placeholder=\"Confirm Password\" required onInput={e => {\r\n                setPwConfirm(e.target.value)\r\n            }} /><br />\r\n            <input className=\"dugme\" type=\"submit\" value=\"Registruj se\" onClick={e => {e.preventDefault();handleSubmit()}} />\r\n            </form>\r\n            <p> *Šifra mora da sadrži broj i da ima najmanje osam karaktera.</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React, { useState, useEffect } from \"react\";\r\nimport { getTopic } from \"../util/service\";\r\nimport {withRouter} from 'react-router-dom'\r\n\r\n\r\nconst ListaTema = ({history}) => {\r\n  console.log(history)\r\n  const [topics, setTopics] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getTopic().then(data => {\r\n        console.log(data)\r\n        setTopics(data.topics)});\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"lista-tema\">\r\n      <h3>Pogledajte postojeće teme:</h3>\r\n      <ul>\r\n        {topics.map(topic => (\r\n          <li onClick = {()=> history.push(`/topic/${topic.topic_id}`)}>{topic.title.toString()}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\nexport default withRouter  (ListaTema);\r\n","import React from \"react\";\r\nimport { Link, withRouter, Switch, Route } from \"react-router-dom\";\r\nimport Login from \"../components/login\";\r\nimport Register from \"../components/register\";\r\nimport ListaTema from \"../components/listatema\";\r\n\r\nconst Header = ({ user, setUser }) => {\r\n  return (\r\n    <div>\r\n      <h1>ITBootcamp Forum</h1>\r\n\r\n      <Link to=\"/login\">\r\n        <input className=\"dugme\" type=\"submit\" value=\"Uloguj se\" />\r\n      </Link>\r\n      <Link to=\"/register\">\r\n        <input className=\"dugme\" type=\"submit\" value=\"Registruj se\" />\r\n      </Link>\r\n      <Switch>\r\n        <Route path=\"/login\">\r\n          {\" \"}\r\n          <Login setUser={setUser} />{\" \"}\r\n        </Route>\r\n        <Route path=\"/register\">\r\n          {\" \"}\r\n          <Register setUser={setUser} />{\" \"}\r\n        </Route>\r\n        <Route path=\" \">\r\n          <Header />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <ListaTema user={user} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\nimport { addTopic, addMessage } from '../util/service';\r\nimport { useState } from 'react';\r\n\r\nconst NovaTema = ({user: { user_id, username}}) => {\r\nconst [title, setTitle] = useState('')\r\nconst [message, setMessage] = useState('')\r\n\r\n\r\n    function handleSubmit(){\r\n            \r\n       addTopic(user_id,title)\r\n        .then(data =>  {\r\n            if(data.success) {\r\n                addMessage({username,topic_id: data.topic.topic_id,message})\r\n                    .then(data => console.log(data))\r\n             \r\n             console.log(data)\r\n              \r\n           }\r\n          else{ console.log(data, 'Tema nije dodata')}\r\n          \r\n          })\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div className = \"nova-tema\">\r\n            <h3>Započni novu temu:</h3>\r\n            <input className=\"input-nova-tema\" type = \"text\" placeholder=\"Naslov\" required onInput={e => {\r\n                setTitle(e.target.value); console.log(title);\r\n            }} /> <br/>\r\n            <input className=\"input-nova-tema\" type = \"text\" placeholder=\"prva poruka\" required onInput={e => {\r\n                setMessage(e.target.value)\r\n            }} /> <br/>\r\n            <input className=\"dugme\" type = \"submit\" value=\"Pošalji\" onClick={e => {e.preventDefault();handleSubmit()}} /> \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NovaTema","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { getMsnOnTpc, addMessage } from \"../util/service\";\r\n\r\nconst Tema = ({ match, user: { username } }) => {\r\n  const [topicID] = useState(match.params.topic_id);\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n\r\n  function handleSubmit() {\r\n    addMessage({username,topic_id: topicID, message} )\r\n      .then(data => {\r\n        console.log(data);\r\n        alert('Morate biti ulogovani!')\r\n        getMsnOnTpc(topicID)\r\n          .then(data => setMessages(data.messages));\r\n      });\r\n      setMessage('')\r\n  }\r\n  console.log(topicID)\r\n  useEffect(() => {\r\n    getMsnOnTpc(topicID)\r\n      .then(data => {\r\n        if (data.success) {\r\n          setMessages(data.messages);\r\n        } else {\r\n          console.log(data);\r\n          \r\n        }\r\n      });\r\n  }, [topicID]);\r\n\r\n\r\n  return (\r\n    <div className=\"postojecaTema\">\r\n      <h3>Dodaj odgovor na temu.</h3>\r\n      <div className=\"poruke\">\r\n        <h3>Pogledajte postojeće poruke:</h3>\r\n        <ul>\r\n        \r\n          {messages.map(message => (\r\n<li key={message.message_id}> Vreme:<b>{new Date(message.timestamp).toLocaleTimeString(\"en-US\")}</b>; Korisnik:<b> {message.username}</b>;<br/> Poruka:<b> {message.message.toString()} </b></li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <form>\r\n      <input\r\n        className=\"input-nova-poruka\"\r\n        type=\"text\"\r\n        placeholder=\"nova poruka\"\r\n        required\r\n        value={message}\r\n        onInput={e => {\r\n          setMessage(e.target.value);\r\n        }}\r\n      />{\" \"}\r\n      <br />\r\n      <input\r\n        className=\"dugme\"\r\n        type=\"submit\"\r\n        value=\"Pošalji\"\r\n        onClick={e => {\r\n          e.preventDefault();\r\n          handleSubmit();\r\n        }}\r\n      />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default Tema\r\n","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { getUsername } from '../util/service';\r\nimport NovaTema from './novaTema';\r\nimport ListaTema from './listatema';\r\nimport Tema from './postojecatema';\r\n\r\nconst Profil = ({ match, usern }) => {\r\n\r\n   const [userID] = useState(match.params.user_id);\r\n    const [user, setUser] = useState({});\r\n\r\n    useEffect(() =>{\r\n        getUsername(userID)\r\n        .then(data =>{\r\n            if(data.success){\r\n                setUser(data.user);\r\n            }\r\n            else{\r\n                console.log(data);\r\n        \r\n            }\r\n        })\r\n    }, [])\r\n\r\n\r\n    return(\r\n        <div className = \"profil-korisnika\">\r\n        <h3>Profil korisnika</h3>\r\n        <br/><br/><br/>\r\n        <ol className = 'profil'>\r\n    <li>Ime:  {user.name}</li>\r\n    <br/><br/>\r\n    {console.log(user)}\r\n    {console.log(user.name)}\r\n    <li>Prezime: {user.surname}</li>\r\n    <br/><br/>\r\n    <li>Username {user.username}</li>\r\n    <br/><br/>\r\n    <li>E-mail: {user.email}</li>\r\n    </ol>\r\n    <img className='profilna' src='https://cdn0.iconfinder.com/data/icons/large-glossy-icons/512/User.png' />\r\n   <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\r\n    <NovaTema user={usern}/>\r\n  \r\n        </div>\r\n    )\r\n}\r\nexport default Profil","import React from \"react\";\r\nimport Login from \"../components/login\";\r\nimport Register from \"../components/register\";\r\nimport NovaTema from \"../components/novaTema\";\r\nimport ListaTema from \"../components/listatema\";\r\nimport Profil from \"../components/profil\";\r\nimport Tema from \"../components/postojecatema\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nconst Content = ({ setUser, setUsername, user }) => {\r\n  return (\r\n    <div>\r\n\r\n      \r\n      \r\n      <Route\r\n        path=\"/topic/:topic_id\"\r\n        component={props => <Tema user={user} {...props} />}\r\n      />\r\n      \r\n      <Route\r\n        path=\"/profile/:user_id\"\r\n        component={props => <Profil usern={user} {...props} />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Content;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return( <h6>&copy;Biljana Pavlovic 2019.</h6>)\r\n}\r\n\r\nexport default Footer","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './layout/header';\nimport Content from './layout/content';\nimport Footer from './layout/footer';\nimport { BrowserRouter as Router, } from 'react-router-dom'\n\n\nfunction App() {\n  const [user, setUser] = useState({});\n  return (\n    <div className=\"App\">\n\n      <Router basename='/ITBootcampZavrsniRad'>\n        <Header user={user} setUser={setUser} />\n\n        <Content setUser={setUser} loggedin={user} user={user} />\n\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}